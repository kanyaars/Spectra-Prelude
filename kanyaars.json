const {
  BufferJSON,
  WA_DEFAULT_EPHEMERAL,
  generateWAMessageFromContent,
  proto,
  generateWAMessageContent,
  generateWAMessage,
  prepareWAMessageMedia,
  areJidsSameUser,
  getContentType
} = require("@whiskeysockets/baileys");

const fs = require("fs");
const util = require("util");
const chalk = require("chalk");
const OpenAI = require("openai");

// Sigil utama â€” kunci buat manggil entitas AI
let setting = require("./sigil.json");
const openai = new OpenAI({ apiKey: setting.keyopenai });

// Entitas pemroses utama
module.exports = kanyaars = async (upsert, sock, store, message) => {
  try {
    let budy = (typeof message.text === 'string' ? message.text : '');
    var prefix = /^[\\/!#.]/gi.test(budy) ? budy.match(/^[\\/!#.]/gi) : "/";
    const isCmd = budy.startsWith(prefix);
    const command = budy.replace(prefix, "").trim().split(/ +/).shift().toLowerCase();
    const args = budy.trim().split(/ +/).slice(1);
    const pushname = message.pushName || "No Name";
    const botNumber = sock.user.id;
    const itsMe = message.sender == botNumber;
    let text = (q = args.join(" "));
    const arg = budy.trim().substring(budy.indexOf(" ") + 1);
    const arg1 = arg.trim().substring(arg.indexOf(" ") + 1);
    const from = message.chat;

    const color = (text, color) => !color ? chalk.green(text) : chalk.keyword(color)(text);

    // Metadata grup
    const groupMetadata = message.isGroup ? await sock.groupMetadata(message.chat).catch(() => {}) : "";
    const groupName = message.isGroup ? groupMetadata.subject : "";

    // Log masuk
    let argsLog = budy.length > 30 ? `${q.substring(0, 30)}...` : budy;
    const logPrefix = chalk.black(chalk.bgWhite("[ SPECTRA ]"));

    if (isCmd && !message.isGroup) {
      console.log(logPrefix, color(argsLog, "turquoise"), chalk.magenta("From"), chalk.green(pushname), chalk.yellow(`[ ${message.sender.replace("@s.whatsapp.net", "")} ]`));
    } else if (isCmd && message.isGroup) {
      console.log(logPrefix, color(argsLog, "turquoise"), chalk.magenta("From"), chalk.green(pushname), chalk.yellow(`[ ${message.sender.replace("@s.whatsapp.net", "")} ]`), chalk.blueBright("IN"), chalk.green(groupName));
    }

    // Handler command
    if (isCmd) {
      switch (command) {
        case "help":
        case "menu":
        case "start":
        case "info":
          message.reply(`*Spectra AI Bot â€” Kanyaars Activated*

ðŸ”® *ChatGPT*
Cmd: ${prefix}ai
Tanya apa pun. Siap dijawab, siap dilawan.

ðŸŽ¨ *DALLÂ·E*
Cmd: ${prefix}img
Ketik imajinasi, tunggu keajaiban visual.

ðŸ“‚ *Source Code*
Cmd: ${prefix}sc
Karena bahkan entitas pun butuh asal-usul.`);
          break;

        case "ai":
        case "openai":
        case "chatgpt":
        case "ask":
          try {
            if (setting.keyopenai === "ISI_APIKEY_OPENAI_DISINI")
              return message.reply("API key belum diisi. Edit file sigil.json dulu ya, wizard.");
            if (!text) return message.reply(`Contoh:\n${prefix}${command} Kenapa manusia suka overthinking?`);
            const chatCompletion = await openai.chat.completions.create({
              messages: [{ role: 'user', content: q }],
              model: 'gpt-3.5-turbo'
            });
            await message.reply(chatCompletion.choices[0].message.content);
          } catch (error) {
            handleError(error, message);
          }
          break;

        case "img":
        case "image":
        case "images":
        case "dalle":
        case "ai-img":
          try {
            if (setting.keyopenai === "ISI_APIKEY_OPENAI_DISINI")
              return message.reply("API key belum diisi. Masuk dulu ke sigil.json.");
            if (!text) return message.reply(`Contoh:\n${prefix}${command} A neon fox meditating under the moon.`);
            const image = await openai.images.generate({
              model: "dall-e-3",
              prompt: q,
              n: 1,
              size: '1024x1024'
            });
            sock.sendMessage(from, {
              image: { url: image.data[0].url },
              caption: "ðŸ§  Generated by DALLÂ·E"
            }, {
              quoted: message,
              ephemeralExpiration: message.contextInfo.expiration
            });
          } catch (error) {
            handleError(error, message);
          }
          break;

        case "sc":
        case "script":
        case "scbot":
          message.reply("ðŸ“‚ Source Code: https://github.com/Sansekai/Wa-OpenAI\nPowered by Spectra:Prelude");
          break;

        default:
          if (isCmd && budy.toLowerCase()) {
            if (message.chat.endsWith("broadcast")) return;
            if (message.isBaileys) return;
            console.log(chalk.black(chalk.bgRed("[ ERROR ]")), color("command", "turquoise"), color(`${prefix}${command}`, "turquoise"), color("tidak dikenali", "red"));
          }
      }
    }
  } catch (err) {
    message.reply(util.format(err));
  }
};

// âœ¨ Handler error agar gak meledak brutal
function handleError(error, message) {
  if (error.response) {
    console.log(error.response.status);
    console.log(error.response.data);
  } else {
    console.log(error);
    message.reply("ðŸš« Terjadi kesalahan: " + error.message);
  }
}

// ðŸ”„ Auto reload on change (dark ritual)
let file = require.resolve(__filename);
fs.watchFile(file, () => {
  fs.unwatchFile(file);
  console.log(chalk.redBright(`âœ¨ Update detected on ${__filename}`));
  delete require.cache[file];
  require(file);
});
